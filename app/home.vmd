---
path: 
layout: onecolumn
namespace: home
realm: home
path: home
---


# Vale is the fast, safe, and easy programming language.


<<<<

Vale's goal is to show the world that *speed and safety can be easy!* Vale is:

 * *Fast:* Vale is an AOT compiled, statically-typed language that uses the new [generational references](/blog/generational-references) technique for memory-safe control over data layout.
 * *Safe:* It is the [safest native language](/fearless), using region isolation and "Fearless FFI" to help keep extern code's bugs from affecting Vale objects.
 * *Easy:* Its new take on [regions](/guide/regions) will enable alternate memory management and allocation strategies, with the planned [region borrow checker](/blog/zero-cost-refs-regions) enabling easy interop between them, and eliminating the vast majority of generational references' overhead.


Read comparisons with [C++, Javascript, and Rust](/comparisons)!


*Upcoming Features:*

We have some ambitious goals, to bring several new ideas into the programming world:

 * A [region borrow checker](/blog/zero-cost-refs-regions) to eliminate memory-safety overhead.
 * [Seamless Concurrency](/blog/seamless-fearless-structured-concurrency) for parallelism without added complexity!
 * [Perfect Replayability](/blog/next-perfect-replayability) to completely eliminate heisenbugs, even in the presence of multithreading!
 * [Fearless FFI](/blog/next-fearless-ffi) to keep external code from corrupting Vale memory, and mitigate supply chain attacks.
 * [Higher RAII](/blog/higher-raii-7drl), which helps us remember to call any function at some point in the future.
 * [Hybrid-Generational Memory](/blog/hybrid-generational-memory), which could reduce the overhead of generational references.


See the [Roadmap](/roadmap) for more!


*Featuring*:

 * [Single Ownership](/guide/references), move semantics, [Higher RAII](/blog/higher-raii-7drl)
 * [Statically Typed](/guide/introduction) with type inference.
 * [Memory Safe](/guide/references#nonowning) with [generational references](/blog/generational-references)
 * [Generics](/guide/generics) and const generics
 * [Universal Function Call Syntax](/guide/introduction#functions)
 * [Mutable and Immutable Objects](/guide/structs#mutability)
 * [Patterns](/guide/patterns) with destructuring
 * [Regions](/guide/regions) for different allocation strategies. (planned!)
 * [Interface Constructors](/guide/interfaces#sealedconstructors) (planned!)



////


```vale
exported func main() {
  println("Hello world!");
}
```stdout
Hello world!
```: `import stdlib.*;`


```vale
exported func main() {
  planets = [#]["Venus", "Earth", "Mars"];
  foreach planet in planets {
    println("Hello " + planet + "!");
  }
}
```stdout
Hello Venus!
Hello Earth!
Hello Mars!
```: `import stdlib.*;`



Vale is part of the [Vale Language Project](/project), which explores, discovers, and publishes new programming language mechanisms that enable speed, safety, and ease of use.


<center>
  <a href="https://github.com/sponsors/ValeLang" class="donate-button">
    <svg aria-hidden="true" height="16" viewBox="0 0 16 16" version="1.1" width="16" data-view-component="true" class="octicon octicon-heart icon-sponsor mr-1 color-fg-sponsors">
      <path fill-rule="evenodd" d="M4.25 2.5c-1.336 0-2.75 1.164-2.75 3 0 2.15 1.58 4.144 3.365 5.682A20.565 20.565 0 008 13.393a20.561 20.561 0 003.135-2.211C12.92 9.644 14.5 7.65 14.5 5.5c0-1.836-1.414-3-2.75-3-1.373 0-2.609.986-3.029 2.456a.75.75 0 01-1.442 0C6.859 3.486 5.623 2.5 4.25 2.5zM8 14.25l-.345.666-.002-.001-.006-.003-.018-.01a7.643 7.643 0 01-.31-.17 22.075 22.075 0 01-3.434-2.414C2.045 10.731 0 8.35 0 5.5 0 2.836 2.086 1 4.25 1 5.797 1 7.153 1.802 8 3.02 8.847 1.802 10.203 1 11.75 1 13.914 1 16 2.836 16 5.5c0 2.85-2.045 5.231-3.885 6.818a22.08 22.08 0 01-3.744 2.584l-.018.01-.006.003h-.002L8 14.25zm0 0l.345.666a.752.752 0 01-.69 0L8 14.25z"></path>
    </svg>
    Sponsor us on GitHub!
  </a>
</center>



*Recent posts:*

 * [Vale's Fearless FFI, for Safer Dependencies and Supply-Chain Attack Mitigation](/blog/fearless-ffi)
 * [Vale 0.2 Released](/blog/version-0.2-released)
 * [Added to Vale 0.2 Beta: Concept Functions](/blog/concept-functions)
 * [Const Generics and the Compile Time Spread Operator](/blog/const-generics-spread)
 * [On Removing Let and Let Mut](/blog/on-removing-let-let-mut)
 * [A Tale of Yak Shaving: Accidentally Making a Language, for an Engine, for a Game
](/blog/yak-shave-language-engine-game)
 * [Surprising Weak-Ref Implementations: Swift, Obj-C, C++, Rust, and Vale](/blog/surprising-weak-refs)
 * [Vale's Higher RAII, the pattern that saved me a vital 5 hours in the 7DRL Challenge](/blog/higher-raii-7drl)
 * [Seamless, Fearless, Structured Concurrency](/blog/seamless-fearless-structured-concurrency)
 * [Generational References](/blog/generational-references)
 * [Hybrid-Generational Memory](/blog/hybrid-generational-memory)
 * [Zero Cost References with Regions](/blog/zero-cost-refs-regions)
 * [Next Steps for Single Ownership and RAII](/blog/raii-next-steps)
 * [Announcing Vale!](https://www.reddit.com/r/ProgrammingLanguages/comments/hplj2i/vale/)

Follow along via our [RSS feed](/rss.xml) or the [r/Vale](https://reddit.com/r/vale) subreddit!




>>>>


<<<<

*What's been happening recently:*

 * *Jun 11, 2022:* [Perfect replayability now supports structs!](https://github.com/ValeLang/Vale/pull/505)
 * *May 25, 2022:* [First successful run of perfect replayability!](https://github.com/ValeLang/Vale/pull/500)
 * *May 10, 2022:* [Vale 0.2 Released](/blog/version-0.2-released)
 * *Apr 26, 2022:* Stack switching for Fearless FFI [successfully prototyped](https://github.com/Verdagon/Vale/commit/f6ff79d29426839424438be7e305026c6eb37299)! Usable with `--enable_side_calling true`.
 * *Apr 4, 2022:* [Sped up compile times by 4.2%](https://github.com/Verdagon/Vale/commit/5f04754b67a2f9e5544f9a17aad725dc17207636).
 * *Mar 21, 2022:* Version 0.2 beta released!
 * *Mar 3, 2022:* Higher RAII added to the standard library, [and used in 7DRL](/blog/higher-raii-7drl)!
 * *Feb 11, 2022:* [Concept functions](/blog/concept-functions) added.
 * *Feb 11, 2022:* [0.1.4 released](https://github.com/Verdagon/Vale/commit/32df8bf13ba8b002c3098e12aa789e1c75112c79), improving syntax.
 * *Jan 20, 2022:* [Sped up compiler up by 10-11x](https://github.com/Verdagon/Vale/commit/32df8bf13ba8b002c3098e12aa789e1c75112c79), by caching hash calculations.
 * *Dec 9, 2021:* [Revamped arrays](https://github.com/Verdagon/Vale/commit/bf86d7a35a73a6182b851a35e0a8e155470c506b) to enable partially filled arrays.
 * *Nov 26, 2021:* [Major compiler refactoring](https://github.com/Verdagon/Vale/commit/70173bfbe77ce2e14da1f098251d1d2c67f5b98f), including [variadic members](/blog/const-generics-spread).


////


Vale is [open for contributions](/contribute), thank you to our team of [contributors](/contributors)!



<center>
  <a href="https://github.com/sponsors/ValeLang" class="donate-button">
    <svg aria-hidden="true" height="16" viewBox="0 0 16 16" version="1.1" width="16" data-view-component="true" class="octicon octicon-heart icon-sponsor mr-1 color-fg-sponsors">
      <path fill-rule="evenodd" d="M4.25 2.5c-1.336 0-2.75 1.164-2.75 3 0 2.15 1.58 4.144 3.365 5.682A20.565 20.565 0 008 13.393a20.561 20.561 0 003.135-2.211C12.92 9.644 14.5 7.65 14.5 5.5c0-1.836-1.414-3-2.75-3-1.373 0-2.609.986-3.029 2.456a.75.75 0 01-1.442 0C6.859 3.486 5.623 2.5 4.25 2.5zM8 14.25l-.345.666-.002-.001-.006-.003-.018-.01a7.643 7.643 0 01-.31-.17 22.075 22.075 0 01-3.434-2.414C2.045 10.731 0 8.35 0 5.5 0 2.836 2.086 1 4.25 1 5.797 1 7.153 1.802 8 3.02 8.847 1.802 10.203 1 11.75 1 13.914 1 16 2.836 16 5.5c0 2.85-2.045 5.231-3.885 6.818a22.08 22.08 0 01-3.744 2.584l-.018.01-.006.003h-.002L8 14.25zm0 0l.345.666a.752.752 0 01-.69 0L8 14.25z"></path>
    </svg>
    Sponsor us on GitHub!
  </a>
</center>


*Thank you to our sponsors!*

 * [Arthur Weagel](https://github.com/aweagel) ($100/mo)
 * [Joseph Jaoudi (linkmonitor)](https://github.com/linkmonitor) ($25/mo)
 * [Tim Stack (tstack)](https://github.com/tstack) ($12/mo)
 * [Alon Zakai (kripken)](https://github.com/kripken) ($12/mo)
 * [Alec Newman (rovaughn)](https://github.com/rovaughn) ($12/mo)
 * [Sergey Davidoff (schnatsel)](https://github.com/Shnatsel) ($12/mo)
 * [Ian (linuxy)](https://github.com/linuxy) ($12/mo)
 * [Ivo Balbaert](https://github.com/Ivo-Balbaert/) ($5/mo)
 * [Kevin Navero](https://github.com/solstice333/) ($5/mo)
 * Ilya Seletsky ($5/mo)
 * Jean Juang ($100)
 * [Posnet](https://github.com/Posnet) ($50)
 * Kim Shook ($20)
 * [Steve Phillips](https://github.com/elimisteve) ($20)


>>>>
